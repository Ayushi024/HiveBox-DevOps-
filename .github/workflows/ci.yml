name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  lint:
    name: Lint Code for Both Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Linting Tools
        run: pip install -U flake8

      - name: Lint basic_versioning
        run: flake8 --max-line-length=88 basic_versioning/

      - name: Lint sensor_api
        run: flake8 --max-line-length=88 sensor_api/

  test_versioning:
    name: Run Unit Tests for Versioning API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          pip install -r basic-versioning/requirements.txt
          pip install pytest

      - name: Debug CI Files
        run: ls -R basic_versioning

      - name: Run Tests
        run: pytest basic_versioning/test_version.py --tb=short

  test_sensor:
    name: Run Unit Tests for Sensor API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          pip install -r sensor-api/requirements.txt
          pip install pytest

      - name: Debug CI Files
        run: ls -R sensor_api

      - name: Run Tests
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        run: pytest sensor_api/test_app.py --tb=short

  build_versioning:
    name: Build, Test & Push Versioning API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure Docker is Running
        run: |
          sudo systemctl start docker || sudo service docker start
          sudo systemctl enable docker || true
          sudo systemctl status docker || true

      - name: Install jq (JSON Processor)
        run: sudo apt-get install -y jq

      - name: Log in to DockerHub
        if: github.ref == 'refs/heads/main'
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ayushi0024/versioning-api:latest -f basic_versioning/Dockerfile .

      - name: Stop and Remove Old Container (if exists)
        run: |
          docker stop versioning-api || true
          docker rm versioning-api || true

      - name: Run Versioning API Container
        run: docker run -d -p 5001:5001 --name versioning-api ayushi0024/versioning-api:latest

      - name: Wait for API to Start
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:5001/version | grep -q 'version'; then
              echo "API is up!"
              exit 0
            fi
            echo "Waiting for API to start..."
            sleep 2
          done
          echo "API failed to start!"
          exit 1

      - name: Verify Container is Running
        run: docker ps -a

      - name: Verify /version Endpoint
        run: |
          docker build -t ayushi0024/versioning-api:latest -f basic-versioning/Dockerfile .
          docker push ayushi0024/versioning-api:latest

  build_sensor:
    name: Build and Push Sensor API Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        if: github.ref == 'refs/heads/main'
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ayushi0024/sensor-api:latest -f sensor-api/Dockerfile .
          docker push ayushi0024/sensor-api:latest



