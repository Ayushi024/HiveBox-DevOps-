name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code for Both Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Linting Tools
        run: pip install flake8

      - name: Lint basic_versioning
        run: flake8 --max-line-length=88 basic_versioning/

      - name: Lint sensor_api
        run: flake8 --max-line-length=88 sensor_api/

  test_versioning:
    name: Run Unit Tests for Versioning API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Dependencies
        run: |
          pip install -r basic_versioning/requirements.txt
          pip install pytest

      - name: Debug CI Files
        run: ls -R basic_versioning

      - name: Run Tests
        run: pytest basic_versioning/test_version.py --tb=short

  test_sensor:
    name: Run Unit Tests for Sensor API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Dependencies
        run: |
          pip install -r sensor_api/requirements.txt
          pip install pytest

      - name: Debug CI Files
        run: ls -R sensor_api

      - name: Run Tests
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        run: pytest sensor_api/test_app.py --tb=short

  test_version_endpoint:
    name: Test /version Endpoint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install curl
        run: sudo apt-get install curl

      - name: Call /version endpoint
        run: |
          response=$(curl -s -w "%{http_code}" -o /dev/null http://localhost:5000/version) # Update with your actual endpoint if different
          echo "Response code: $response"
          if [ "$response" -ne 200 ]; then
            echo "Error: /version endpoint returned $response"
            exit 1
          fi

  build_versioning:
    name: Build and Push Versioning API Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ayushi0024/versioning-api:latest -f basic_versioning/Dockerfile .
          docker push ayushi0024/versioning-api:latest

  build_sensor:
    name: Build and Push Sensor API Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ayushi0024/sensor_api:latest -f sensor_api/Dockerfile .
          docker push ayushi0024/sensor_api:latest